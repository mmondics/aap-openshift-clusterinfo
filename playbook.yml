---
- name: Gather OpenShift cluster information
  hosts: localhost
  gather_facts: false
  collections: [kubernetes.core]

  vars:
    # provide these via Inventory vars or Extra Vars
    # k8s_host: "https://api.ocpvirt.cpolab.ibm.com:6443"
    # k8s_user: "myuser"
    # k8s_pass: "mypassword"
    validate_certs: false
    save_artifacts: false   # set true to write JSON files

  tasks:
    # --- Core queries ---
    - name: Get OpenShift ClusterVersion
      kubernetes.core.k8s_info:
        host: "{{ k8s_host }}"
        username: "{{ k8s_user }}"
        password: "{{ k8s_pass }}"
        validate_certs: "{{ validate_certs }}"
        api_version: config.openshift.io/v1
        kind: ClusterVersion
        name: version
      register: ocp_cv

    - name: Get Infrastructure (platform & region)
      kubernetes.core.k8s_info:
        host: "{{ k8s_host }}"
        username: "{{ k8s_user }}"
        password: "{{ k8s_pass }}"
        validate_certs: "{{ validate_certs }}"
        api_version: config.openshift.io/v1
        kind: Infrastructure
        name: cluster
      register: infra

    - name: Get ClusterOperators
      kubernetes.core.k8s_info:
        host: "{{ k8s_host }}"
        username: "{{ k8s_user }}"
        password: "{{ k8s_pass }}"
        validate_certs: "{{ validate_certs }}"
        api_version: config.openshift.io/v1
        kind: ClusterOperator
      register: operators

    - name: Get Nodes
      kubernetes.core.k8s_info:
        host: "{{ k8s_host }}"
        username: "{{ k8s_user }}"
        password: "{{ k8s_pass }}"
        validate_certs: "{{ validate_certs }}"
        api_version: v1
        kind: Node
      register: nodes

    - name: Get Projects (namespaces)
      kubernetes.core.k8s_info:
        host: "{{ k8s_host }}"
        username: "{{ k8s_user }}"
        password: "{{ k8s_pass }}"
        validate_certs: "{{ validate_certs }}"
        api_version: project.openshift.io/v1
        kind: Project
      register: projects

    # --- OperatorHub: list installed operators (Subscriptions + CSVs) ---

    # Gather Subscriptions across all namespaces
    - name: Get Subscriptions in each namespace
      kubernetes.core.k8s_info:
        host: "{{ k8s_host }}"
        username: "{{ k8s_user }}"
        password: "{{ k8s_pass }}"
        validate_certs: "{{ validate_certs }}"
        api_version: operators.coreos.com/v1alpha1
        kind: Subscription
        namespace: "{{ item }}"
      loop: "{{ projects.resources | map(attribute='metadata.name') | list }}"
      register: subs_query

    - name: Flatten Subscriptions
      ansible.builtin.set_fact:
        subscriptions_all: "{{ (subs_query.results | map(attribute='resources') | list | sum(start=[])) | default([]) }}"

    # Gather CSVs across all namespaces
    - name: Get ClusterServiceVersions in each namespace
      kubernetes.core.k8s_info:
        host: "{{ k8s_host }}"
        username: "{{ k8s_user }}"
        password: "{{ k8s_pass }}"
        validate_certs: "{{ validate_certs }}"
        api_version: operators.coreos.com/v1alpha1
        kind: ClusterServiceVersion
        namespace: "{{ item }}"
      loop: "{{ projects.resources | map(attribute='metadata.name') | list }}"
      register: csvs_query

    - name: Flatten CSVs
      ansible.builtin.set_fact:
        csvs_all: "{{ (csvs_query.results | map(attribute='resources') | list | sum(start=[])) | default([]) }}"

    # Build a quick index of CSVs by "namespace/name" for lookups
    - name: Build CSV index (namespace/name -> {displayName, version})
      ansible.builtin.set_fact:
        csv_index: {}
    - name: Index CSVs
      ansible.builtin.set_fact:
        csv_index: >-
          {{ csv_index | combine({
              (item.metadata.namespace ~ "/" ~ item.metadata.name): {
                'displayName': (item.spec.displayName | default(item.metadata.name)),
                'version': (item.spec.version | default('unknown'))
              }
            }) }}
      loop: "{{ csvs_all }}"

    # Produce installed operators list from Subscriptions
    - name: Build installed_operators list (one row per Subscription)
      ansible.builtin.set_fact:
        installed_operators: []
    - name: Append operators from Subscriptions
      ansible.builtin.set_fact:
        installed_operators: >-
          {{ installed_operators + [ {
              'namespace': item.metadata.namespace,
              'subscription': item.metadata.name,
              'package': item.spec.name | default('unknown'),
              'channel': item.spec.channel | default('unknown'),
              'source': item.spec.source | default('unknown'),
              'sourceNamespace': item.spec.sourceNamespace | default('unknown'),
              'installedCSV': item.status.installedCSV | default('unknown'),
              'csv_displayName': (
                 csv_index.get(item.metadata.namespace ~ "/" ~ (item.status.installedCSV | default('')), {}).get('displayName', 'unknown')
              ),
              'csv_version': (
                 csv_index.get(item.metadata.namespace ~ "/" ~ (item.status.installedCSV | default('')), {}).get('version', 'unknown')
              )
            } ] }}
      loop: "{{ subscriptions_all | default([]) }}"

    # Optional: group by namespace for readability
    - name: Group installed operators by namespace
      ansible.builtin.set_fact:
        operators_by_ns: {}
    - name: Build namespace grouping
      ansible.builtin.set_fact:
        operators_by_ns: >-
          {{ operators_by_ns | combine({
              item.namespace: (operators_by_ns.get(item.namespace, []) + [item])
            }) }}
      loop: "{{ installed_operators | default([]) }}"

    - name: Print installed operators summary
      ansible.builtin.debug:
        msg:
          total_subscriptions: "{{ (installed_operators | default([])) | length }}"
          namespaces_with_operators: "{{ (operators_by_ns.keys() | list) | length }}"
          operators_by_namespace: "{{ operators_by_ns }}"

    # --- Node architecture report (name -> arch) ---
    - name: Init node_arch_table
      ansible.builtin.set_fact:
        node_arch_table: []
    - name: Collect node architectures
      ansible.builtin.set_fact:
        node_arch_table: >-
          {{ node_arch_table + [ {
              'name': item.metadata.name,
              'arch': (
                item.status.nodeInfo.architecture
                | default(item.metadata.labels['kubernetes.io/arch']
                | default(item.metadata.labels['beta.kubernetes.io/arch']
                | default('unknown')))
              )
            } ] }}
      loop: "{{ nodes.resources | default([]) }}"

    - name: Compute architecture counts
      ansible.builtin.set_fact:
        arch_counts: {}
    - name: Increment counts per arch
      ansible.builtin.set_fact:
        arch_counts: "{{ arch_counts | combine({ item.arch: (arch_counts.get(item.arch, 0) + 1) }) }}"
      loop: "{{ node_arch_table }}"

    # --- Optional: write artifacts only when requested ---
    - name: Save gathered JSON artifacts (optional)
      when: save_artifacts | bool
      ansible.builtin.copy:
        dest: "./{{ item.name }}.json"
        content: "{{ item.content | to_nice_json }}"
      loop:
        - { name: "clusterversion",     content: "{{ ocp_cv }}" }
        - { name: "infrastructure",     content: "{{ infra }}" }
        - { name: "clusteroperators",   content: "{{ operators }}" }
        - { name: "nodes",              content: "{{ nodes }}" }
        - { name: "projects",           content: "{{ projects }}" }

    # --- Summary to job log ---
    - name: Summary
      vars:
        ocp_version: >-
          {{ ocp_cv.resources[0].status.desired.version
             if (ocp_cv.resources|length>0 and ocp_cv.resources[0].status is defined and
                 ocp_cv.resources[0].status.desired is defined)
             else 'unknown' }}
        platform: >-
          {{ infra.resources[0].status.platformStatus.type
             if (infra.resources|length>0 and infra.resources[0].status is defined and
                 infra.resources[0].status.platformStatus is defined)
             else 'unknown' }}
        node_count: "{{ (nodes.resources | default([])) | length }}"
        project_count: "{{ (projects.resources | default([])) | length }}"
        operators_available: >-
          {{
            operators.resources
            | map(attribute='status.conditions')
            | select('defined')
            | map('selectattr', 'type', 'equalto', 'Available')
            | map('selectattr', 'status', 'equalto', 'True')
            | list
            | length
          }}
      ansible.builtin.debug:
        msg:
          openshift_version: "{{ ocp_version }}"
          platform: "{{ platform }}"
          nodes: "{{ node_count }}"
          node_arch_summary: "{{ arch_counts }}"
          projects: "{{ project_count }}"
          operators_available: "{{ operators_available }}"
          # (optional) include each node's arch:
          # nodes_by_arch: "{{ node_arch_table }}"
